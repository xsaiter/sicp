(defun scm-eval (exp env)
  (cond ((self-eval-p exp) exp)
	((var-p exp) (lookup-var-value exp env))
	((quoted-p exp) (text-of-quotation exp))
	((assign-p exp) (eval-assign exp env))
	((def-p exp) (eval-def exp env))
	((if-p exp) (eval-if exp env))
	((lambda-p exp)
	 (make-proc (lambda-params exp)
		    (lambda-body exp)
		    (env)))
	((begin-p exp)
	 (eval-seq (begin-actions exp) env))
	(cond-p exp (scm-eval (cond->if exp) env))
	((app-p exp)
	 (scm-apply (scm-eval (operator exp) env)
		  (list-of-values (operands exp) env)))
	(t (error "EVAL: unexpected exp" exp))))

(defun scm-apply (proc args)
  (cond ((basic-proc-p proc)
	 (apply-basic-proc proc args))
	((compound-proc-p proc)
	 (eval-seq
	  (proc-body proc)
	  (extend-env
	   (proc-params proc)
	   args
	   (proc-env proc))))
	(t (error "APPLY: unexpected proc" proc))))

(defun list-of-values (exps env)
  (if (no-operands-p exps)
      '()
      (cons (scm-eval (first-operand exps) env)
	    (list-of-values (rest-operands exps) env))))

(defun eval-if (exp env)
  (if (true-p (scm-eval (if-predicate exp) env))
      (scm-eval (if-conseq exp) env)
      (scm-eval (if-alt exp) env)))

(defun eval-seq (exps env)
  (cond ((last-exp-p exps)
	 (scm-eval (first-exp exps) env))
	(t (scm-eval (first-exp exps) env)
	   (eval-seq (rest-exps exps) env))))

(defun eval-assign (exp env)
  (set-var-value (assign-var exp)
		 (scm-eval (assign-value exp) env)
		 (env)))

(defun eval-def (exp env)
  (def-var-set (def-var exp)
      (scm-eval (def-val exp) env)
    (env)))

(defun self-eval-p (exp)
  (cond ((numberp exp) t)
	((stringp exp) t)
	(t nil)))
	      
